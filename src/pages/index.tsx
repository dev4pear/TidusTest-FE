import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { readContract, simulateContract, writeContract } from "@wagmi/core";
import { Address, parseUnits } from "viem";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { config } from "../wagmi";
import NFT from "../ABI/nft.json";
import { sepolia } from "viem/chains";
import axios from "axios";
import { setNFTs } from "../store/nftSlice";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { NFTDataType } from "../types";

const Home: NextPage = () => {
  const { address, connector } = useAccount();
  const dispatch = useDispatch();
  const nfts = useSelector((state: any) => state.nft.nfts); // Access NFTs from Redux store

  const fetchNFTs = async () => {
    const nftIdsCreatedByMe = (await readContract(config, {
      address: process.env.NEXT_PUBLIC_NFT_ADDRESS as Address,
      abi: NFT,
      functionName: "getOwnedNFTs",
      chainId: sepolia.id,
      args: [address],
    })) as number[];
    const myNfts = await Promise.all(
      nftIdsCreatedByMe.map(async (tokenId: number) => {
        let tokenUri = await readContract(config, {
          address: process.env.NEXT_PUBLIC_NFT_ADDRESS as Address,
          abi: NFT,
          functionName: "tokenURI",
          chainId: sepolia.id,
          args: [tokenId],
        });

        const { data: metadata } = await axios.get(tokenUri as string);
        return metadata;
      })
    );
    dispatch(setNFTs(myNfts));
  };

  useEffect(() => {
    if (address) {
      fetchNFTs(); // Call the async function
    } else {
      dispatch(setNFTs([]));
    }
  }, [address]);

  const mintNFT = async () => {
    try {
      const { request } = await simulateContract(config, {
        address: process.env.NEXT_PUBLIC_NFT_ADDRESS as Address,
        abi: NFT,
        functionName: "mint",
        args: [address, 1],
        value: parseUnits("0.0001", 18),
        chainId: sepolia.id,
        connector,
      });

      const hash = await writeContract(config, request);

      setTimeout(() => {
        fetchNFTs();
      }, 5000);

      return { res: true, hash: hash };
    } catch (error: any) {
      console.log(error.message);
      if (String(error.message).includes("User rejected the request.")) {
        toast.warning("User rejected the request.");
      } else if (String(error.message).includes("executing this transaction exceeds the balance of the account.")) {
        toast.error("You don't have enough balance!");
      } else {
        toast.error("Something went wrong!");
      }
    }
  };

  return (
    <div className={styles.container + " flex flex-col gap-5 md:gap-10 my-10"}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <div className="flex justify-end">
        <ConnectButton />
      </div>

      <button
        onClick={() => mintNFT()}
        className="bg-blue-400 w-52 py-5 cursor-pointer rounded-lg mx-auto text-2xl"
      >
        Mint
      </button>

      <p className="text-2xl">My NFTS:</p>
      <div className="grid grid-cols-2 md:grid-cols-4 xl:grid-cols-6 justify-center gap-5 md:gap-10">
        {nfts &&
          nfts.map((nft: NFTDataType, index: number) => {
            return (
              <div
                className="flex flex-col gap-2 md:gap-5 border border-gray-400 rounded-lg p-5 text-center"
                // key={nft.name}
                key={index}
              >
                <h1 className="text-lg md:text-2xl text-[#2FC843]">
                  {nft.name}
                </h1>
                <h2 className="text-md md:text-xl text-[#8420d9]">
                  {nft.description}
                </h2>
                <img src={nft.image} className="w-full h-full" alt="" />
              </div>
            );
          })}
      </div>

      <ToastContainer />
    </div>
  );
};

export default Home;
